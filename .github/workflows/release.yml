name: Release

on:
  push:
    tags:
      - 'v*' # Triggers on tags like v1.0.0, v1.2.3, etc.

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch all history for proper versioning

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.15.0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'
          registry-url: 'https://registry.npmjs.org/'
          always-auth: true

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Extract version from tag
        id: version
        run: |
          # Extract version from tag (remove 'v' prefix)
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Extracted version: $VERSION"

      - name: Update package.json version
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          echo "Updating package.json to version: $VERSION"

          # Update version in package.json using pnpm
          pnpm version "$VERSION" --no-git-tag-version

          # Verify the change
          echo "Updated package.json:"
          jq '.version' package.json

      - name: Run tests (if available)
        run: |
          if pnpm run test --if-present; then
            echo "Tests passed"
          else
            echo "No tests found or tests failed"
            exit 1
          fi

      - name: Run linting
        run: |
          if pnpm run lint --if-present; then
            echo "Linting passed"
          else
            echo "Linting failed"
            exit 1
          fi

      - name: Build package (if build script exists)
        run: |
          if pnpm run build --if-present; then
            echo "Build completed"
          else
            echo "No build script found, skipping build"
          fi

      - name: Verify package contents
        run: |
          echo "Package contents:"
          ls -la
          echo ""
          echo "Package.json:"
          cat package.json

      - name: Check if version already exists
        id: check-version
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          PACKAGE_NAME=$(jq -r .name package.json)

          if pnpm view "$PACKAGE_NAME@$VERSION" version >/dev/null 2>&1; then
            echo "Version $VERSION already exists on npm"
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "Version $VERSION is new"
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Publish to npm
        if: steps.check-version.outputs.exists == 'false'
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          PACKAGE_NAME=$(jq -r .name package.json)

          echo "Publishing $PACKAGE_NAME@$VERSION to npm..."
          pnpm publish --access public --no-git-checks

          echo "Successfully published $PACKAGE_NAME@$VERSION"
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Create GitHub Release
        if: steps.check-version.outputs.exists == 'false'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ steps.version.outputs.version }}
          body: |
            ## @qvlt/config-eslint v${{ steps.version.outputs.version }}

            ESLint configuration for Qvlt projects.

            ### Installation
            ```bash
            pnpm add -D @qvlt/config-eslint@${{ steps.version.outputs.version }}
            ```

            ### What's Changed
            See the [changelog](https://github.com/qvlt/config-eslint/compare/${{ github.event.before }}...${{ github.sha }}) for details.
          draft: false
          prerelease: false

      - name: Skip release (version exists)
        if: steps.check-version.outputs.exists == 'true'
        run: |
          echo "Skipping release - version ${{ steps.version.outputs.version }} already exists on npm"
